"     ______                     ___                _    ___         
"    / ____/___  _________  ____/ (_)___  ____ _   | |  / (_)___ ___ 
"   / /   / __ \/ ___/ __ \/ __  / / __ \/ __ `/   | | / / / __ `__ \
"  / /___/ /_/ / /__/ /_/ / /_/ / / / / / /_/ /    | |/ / / / / / / /
"  \____/\____/\___/\____/\__,_/_/_/ /_/\__, /     |___/_/_/ /_/ /_/ 
"                                      /____/                        
"
" Maintainer:			Vincent Wancocoding  <https://cocoding.cc>
" Vim Version:			8.2.1830
" Version:			0.2
" Created:			2020-10-01
" Updated:			2020-10-28
" OS:				Windows
"
" Section:
"   * Plug Init and Install
"   * Basic Settings
"   * Appearance(Color , theme , StatusLine)
"   * Abbreviations
"   * Commands
"   * Functions
"   * Mappings
"   * Netrw
"   * PlugSetting NERDTree(disable, use netrw)
"   * PlugSetting airline
"   * PlugSetting tagbar
"   * PlugSetting startify
"   * PlugSetting UltiSnips
"   * PlugSetting Markdown
"   * PlugSetting coc.nvim
"   * PlugSetting vim-go
"   * PlugSetting LanguageClient-neovim(disable)
"   * PlugSetting deoplete(disable)
"   * PlugSetting pi2md

"*****************************************************************************
"" Vim-Plug core init
"*****************************************************************************

let vimplug_exists=expand('~/vimfiles/autoload/plug.vim')
if has('win32') && !has('win64')
  let curl_exists=expand('C:\Windows\Sysnative\curl.exe')
else
  let curl_exists=expand('curl')
endif

" set shellslash

" shell setting
" if has("win32")
"   " set shell=cmd.exe
"   " set shellcmdflag=/c\ powershell.exe\ -NoLogo\ -NoProfile\ -NonInteractive\ -ExecutionPolicy\ RemoteSigned
"   " set shellpipe=|
"   " set shellredir=>
  " set shell=powershell
  " set shellcmdflag=-command
  " set shellquote=\"
  " set shellxquote= 
" endif

"*****************************************************************************
"" Plug install packages
"*****************************************************************************
" Required:
call plug#begin(expand('~/vimfiles/plugged'))

" ============  navigation
" Plug 'preservim/nerdtree'

" ============  theme
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'ayu-theme/ayu-vim'

" ============  status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ============  Language Support
Plug 'majutsushi/tagbar'
" Plug 'dense-analysis/ale'    " Asynchronous Lint Engine

" ============  Git Plugin
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" ============  Completion Support
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
Plug 'neoclide/coc.nvim', {'branch': 'release'}


" ============  Snippets Support
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'

" ============  Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" ============  Misc 
" align tools
Plug 'godlygeek/tabular'   
" Start Screen for vim
Plug 'mhinz/vim-startify'
" Comment Plugin
Plug 'tpope/vim-commentary'
" parentheses, brackets, quotes, XML tags
" Plug 'tpope/vim-surround'
" My plugin for paste image from clipboard
Plug 'wancocoding/pi2md'


call plug#end()


"*****************************************************************************
"" Basic Setup
"*****************************************************************************"

" Required:
filetype plugin indent on

"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,chinese,latin-1,gbk,gb18030,gk2312
set ttyfast

" path
set path+=**

" if has("win32")
"     set fileencoding=chinese
" else
"     set fileencoding=utf-8
" endif

" With a map leader it's possible to do extra key combinations
let mapleader = " "
let g:mapleader = " "

"" Fix backspace indent
set backspace=indent,eol,start          " allow backspacing over everything in insert mode  ,set bs=2  have the same effect

" tab settings
set smarttab                            " insert tabs on the start of a line according to context
set tabstop=4                           " Number of spaces that a <Tab> in the file counts for
set softtabstop=4                       " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>
set shiftwidth=4                        " Number of spaces to use for each step of (auto)indent
set shiftround

set autoindent                          " auto indentation
set smartindent                         " auto indent for c program

set autoread                            " auto read when file is changed from outside
set wildignore=*.o,*.class,*.pyc        " ignore these files while expanding wild chars
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" set clipboard for system
set clipboard=unnamed
if has('nvim')
  set clipboard+=unnamedplus
endif


"" Enable hidden buffers
set hidden

set showcmd                             " display incomplete commands

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" disable sound on errors
if has("gui_running")
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
		autocmd GUIEnter * set visualbell t_vb=
	endif
endif
set noerrorbells
set novisualbell
set t_vb=
set tm=1000


" session management
let g:session_directory = "~/vimfiles/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

" do not keep a backup file, use versions instead
set nobackup
set nowritebackup
set noswapfile

set history=700                         " keep 700 lines of command line history
set undolevels=700                      " undo level


" Use modeline overrides
set modeline
set modelines=10

" Set the title
set title
set titleold="Terminal"
set titlestring=%F


" command completion like zsh
set wildmenu
set wildmode=full


" set dictionary
set complete+=k
if has('win32')
  set dictionary+=c:\Users\oherg\vimfiles\dictionary\words.txt
else

  set dictionary+=/usr/share/dict/words
endif

" shortmess, the default is filnxtToOIcS, see :h shortmess
set shm-=S



"*****************************************************************************
"" Appearance(Color , theme , StatusLine)
"*****************************************************************************

syntax enable
syntax on

set ruler                               " show the cursor position all the time

set nu                                  " number line
" set t_Co=256                            " number of colors
if has("gui_running")
  " fix gvim menu can not show chinese on windows 
  source $VIMRUNTIME/delmenu.vim
  source $VIMRUNTIME/menu.vim
  " set guioptions-=m  " disable menu bar
  " set guioptions-=T  " disable toolbar
  " set guioptions-=r  " disable scrollbar
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
  " Hide the mouse when typing text
  set mousehide
else
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = 0
  let g:indentLine_char = '┆'
  let g:indentLine_faster = 1

  
  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
		" Enable true color term 24bit
		if exists('+termguicolors')
			let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
			let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
			set termguicolors
		else
			set term=xterm-256color
		endif
    endif
  endif
endif

" set guifont=Cascadia\ Code\ PL:h12
set guifont=Source\ Code\ Pro:h12

" set tw=79                             " Maximum width of text that is being inserted
set colorcolumn=80                      " display a column line

set list                                " Show tabs as CTRL-I is displayed, display $ after end of line
" listchar
set listchars=tab:▸\ ,eol:¬,trail:·,precedes:←,extends:→

let no_buffers_menu=1

set background=dark
set cursorline
let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox
" colorscheme badwolf



"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall


"*****************************************************************************
"" Commands
"*****************************************************************************
" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

" Some useful shortcuts
if has('win32')
  command! Vimrc e ~\_vimrc
else
  command! Vimrc e ~/.vimrc
endif


"*****************************************************************************
"" Functions
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif

"*****************************************************************************
"" Mappings
"*****************************************************************************
"" Split
" noremap <Leader>h :<C-u>split<CR>
" noremap <Leader>v :<C-u>vsplit<CR>

"" Git
" noremap <Leader>ga :Gwrite<CR>
" noremap <Leader>gc :Gcommit<CR>
" noremap <Leader>gsh :Gpush<CR>
" noremap <Leader>gll :Gpull<CR>
" noremap <Leader>gs :Gstatus<CR>
" noremap <Leader>gb :Gblame<CR>
" noremap <Leader>gd :Gvdiff<CR>
" noremap <Leader>gr :Gremove<CR>

" session management
" nnoremap <leader>so :OpenSession<Space>
" nnoremap <leader>ss :SaveSession<Space>
" nnoremap <leader>sd :DeleteSession<CR>
" nnoremap <leader>sc :CloseSession<CR>

"" Tabs
" nnoremap <Tab> gt
" nnoremap <S-Tab> gT
" nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>:pwd<CR>

"" Clean search (highlight)
nnoremap <silent> <leader>nh :noh<CR>

" Better copy & paste
:set pastetoggle=<F5>

"" Disable arrowkeys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>


" Use <leader>Esc to leave terminal mode
tnoremap <leader><Esc> <C-\><C-n>

" tab settings
noremap <A-1> 1gt
noremap <A-2> 2gt
noremap <A-3> 3gt
noremap <A-4> 4gt
noremap <A-5> 5gt
noremap <A-6> 6gt
noremap <A-7> 7gt
noremap <A-8> 8gt
noremap <A-9> :tablast<cr>
noremap <A-0> :tabfirst<cr>

" windows resize
:nnoremap <silent> <Up> :resize -1<CR>
:nnoremap <silent> <Down> :resize +1<CR>
:nnoremap <silent> <left> :vertical resize -1<CR>
:nnoremap <silent> <right> :vertical resize +1<CR>

"*****************************************************************************
" Netrw
"*****************************************************************************

let g:netrw_banner = 0
" let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20

" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END


" " Toggle Vexplore
" function! ToggleVExplorer()
"   if exists("t:expl_buf_num")
"       let expl_win_num = bufwinnr(t:expl_buf_num)
"       if expl_win_num != -1
"           let cur_win_nr = winnr()
"           exec expl_win_num . 'wincmd w'
"           close
"           exec cur_win_nr . 'wincmd w'
"           unlet t:expl_buf_num
"       else
"           unlet t:expl_buf_num
"       endif
"   else
"       exec '1wincmd w'
"       Vexplore
"       let t:expl_buf_num = bufnr("%")
"   endif
" endfunction

" map <silent> <F3> :call ToggleVExplorer()<CR>


"*****************************************************************************
" Nerdtree (use netrw instead)
"*****************************************************************************
" " custom ignore
" let g:NERDTreeIgnore=['\.class$', '\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']

" let g:NERDTreeChDirMode=2
" let g:NERDTreeShowBookmarks=1
" let g:nerdtree_tabs_focus_on_files=1
" let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
" " show line number
" let NERDTreeShowLineNumbers=0
" " show hidden file
" let NERDTreeShowHidden=0
" " set width
" let NERDTreeWinSize=35

" nnoremap <silent> <F2> :NERDTreeFind<CR>
" nnoremap <silent> <F3> :NERDTreeToggle<CR>

" " auto open nerdtree when open a dir
" " autocmd StdinReadPre * let s:std_in=1
" " autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline theme
" let g:airline_theme='gruvbox'

let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1


" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" fix the command mode in the status line now show in vim"
if !has('nvim')
  au CmdLineEnter * redraws
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" startify
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" session
if has('win32')
  let g:startify_session_dir = '~\vimfiles/startify_session'
else
  let g:startify_session_dir = '~/.vim/startify_session'
endif

" auto update session
let g:startify_session_persistence = 1

let g:startify_lists = [
         \ { 'type': 'files',     'header': ['   Files']            },
         \ { 'type': 'dir',       'header': ['   Current Directory '. getcwd()] },
         \ { 'type': 'sessions',  'header': ['   Sessions']       },
         \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
         \ ]

if has('win32')
  let g:startify_bookmarks = [
    \ { 'i': '~\_vimrc' },
    \ { 'z': '~\.zshrc' },
    \ { 'd': 'd:\develop\workspace'},
    \ { 'n': 'f:\Dropbox\Dropbox\docs\md\notes' },
    \ ]
else
  let g:startify_bookmarks = [
    \ { 'i': '~/.vimrc' },
    \ { 'z': '~/.zshrc' },
    \ { 'd': '~/develop/workspace'},
    \ { 'n': '~/Dropbox/docs/md/notes' },
    \ ]
endif





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown for CTag
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Add support for markdown files in tagbar.
" see https://github.com/jszakmeister/markdown2ctags
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : '~/vimfiles/scripts/markdown2ctags.py',
    \ 'ctagsargs' : '-f - --sort=yes --sro=»',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '»',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" coc.nvim config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TextEdit might fail if hidden is not set.
set hidden

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif


" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format)
nmap <leader>f  <Plug>(coc-format)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction)
nmap <leader>a  <Plug>(coc-codeaction)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Golang config 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

autocmd BufWritePre *.go :call CocAction('organizeImport')

" shortcuts for golang
augroup vim-go
	au!
	" autocmd FileType go nmap <leader>b  <Plug>(go-build)
	autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
	autocmd FileType go nmap <leader>r  <Plug>(go-run)
	autocmd FileType go nmap <leader>t  <Plug>(go-test)
augroup END



" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
" let g:go_def_mapping_enabled = 0


" GoTag see: https://github.com/jstemmer/gotags

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LanguageClient-neovim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" " Required for operations modifying multiple buffers like rename.
" set hidden

" let g:LanguageClient_serverCommands = {
"     \ 'python' : ['pyls'],
"     \ 'vim': ['d:\develop\Scoop\apps\nodejs-lts\current\bin\vim-language-server.cmd', '--stdio'],
"     \ }


" let g:LanguageClient_settingsPath = '~\vimfiles\lsc-settings.json'
" let g:LanguageClient_loadSettings = 1
" let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')
" let g:LanguageClient_loggingLevel = 'DEBUG'
"     " \ 'vim': ['d:\develop\Scoop\apps\nodejs-lts\current\bin\node_modules\vim-language-server\bin\index.js', 
"     "     \ '--node-ipc']
" " \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
" " \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
" " \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
" " \ 'python': ['/usr/local/bin/pyls'],
" " \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],

" " nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" " nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" " nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" " set omnifunc=LanguageClient#complete

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Deoplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set pyxversion=3

" let g:deoplete#enable_at_startup = 1

" if has('win32')
"   let g:python3_host_prog = 'd:\develop\env\Python\Python38\python.exe'
" endif

" " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" " call deoplete#custom#source('LanguageClient',
" "   \ 'min_pattern_length',
"   " \ 2)

" call deoplete#custom#option({
"   \ 'auto_complete_delay': 200,
"   \ 'smart_case': v:true,
"   \ })



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" pi2md config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:pi2mdSettings = {
    \ 'debug': 1,
    \ 'storage': 1,
    \ 'storage_local_position_type': 0,
    \ 'storage_local_dir_name': 'images',
    \ 'storage_local_absolute_path': '/User/yourname/your_images_path',
    \ 'storage_local_prefer_relative_path': 1,
    \ 'storage_cloud_tool': 'picgo',
    \ 'storage_cloud_picgocore_path': 
    \     'd:\develop\Scoop\apps\nodejs-lts\current\bin\picgo.cmd',
    \ 'storage_cloud_picgoapp_node_path': 
    \     'd:\develop\Scoop\apps\nodejs-lts\current\node.exe',
    \ 'storage_cloud_picgoapp_api_server_port': '36678'
  \ }







" vim:set et sts=4 sw=4 ts=4 tw=78 ft=vim: