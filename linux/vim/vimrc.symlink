"     ______                     ___                _    ___         
"    / ____/___  _________  ____/ (_)___  ____ _   | |  / (_)___ ___ 
"   / /   / __ \/ ___/ __ \/ __  / / __ \/ __ `/   | | / / / __ `__ \
"  / /___/ /_/ / /__/ /_/ / /_/ / / / / / /_/ /    | |/ / / / / / / /
"  \____/\____/\___/\____/\__,_/_/_/ /_/\__, /     |___/_/_/ /_/ /_/ 
"                                      /____/                        
"
" Maintainer:			Vincent Wancocoding  <https://cocoding.cc>
" Vim Version:			8.2.2020
" Version:				0.1.1
" Created:				2020-11-04
" Updated:				2020-11-22
" OS:					Linux


"*****************************************************************************
" Plug install packages {{{
"*****************************************************************************
" Required:
call plug#begin(expand('~/.vim/plugged'))

" ============  navigation
" Plug 'preservim/nerdtree'

" ============  theme
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'ayu-theme/ayu-vim'

" ============  status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ============  Language Support
" Plug 'majutsushi/tagbar'
" Plug 'dense-analysis/ale'    " Asynchronous Lint Engine

" ============  Git Plugin
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" ============  Completion Support
Plug 'neoclide/coc.nvim', {'branch': 'release'}


" ============  Snippets Support
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'

" ============  Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" ============  Misc 
" fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" align tools
Plug 'godlygeek/tabular'   
" Start Screen for vim
" Plug 'mhinz/vim-startify'
" Comment Plugin
Plug 'tpope/vim-commentary'
" parentheses, brackets, quotes, XML tags
Plug 'tpope/vim-surround'
" markdown preview
" Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

" My plugin for paste image from clipboard
Plug 'wancocoding/pi2md'


call plug#end()

" }}}

"*****************************************************************************
" Basic Setup {{{
"*****************************************************************************

" Required:
filetype plugin indent on

" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,chinese,latin-1,gbk,gb18030,gk2312
set ttyfast

" path
" set path+=**

" set clipboard
set clipboard+=unnamed

" set leader
let mapleader = " "
let g:mapleader = " "

" Fix backspace indent
set backspace=indent,eol,start          " allow backspacing over everything in insert mode  ,set bs=2  have the same effect

" Use modeline overrides
set modeline
set modelines=5

" do not keep a backup file, use versions instead
set nobackup
set nowritebackup
set noswapfile

" undo and history
set history=700
set undolevels=700

" tab settings
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround

" indent settings
set autoindent
set smartindent

" auto read when file is changed from outside
set autoread
set wildignore=*.o,*.class,*.pyc
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" disable sound on errors
if has("gui_running")
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
		autocmd GUIEnter * set visualbell t_vb=
	endif
endif
set noerrorbells
set novisualbell
set t_vb=
set tm=1000

" command completion like zsh
set wildmenu
set wildmode=full

" set dictionary
set complete+=k
if has('win32')
  set dictionary+=c:\Users\oherg\vimfiles\dictionary\words.txt
else
  set dictionary+=/usr/share/dict/words
endif

" shortmess, the default is filnxtToOIcS, see :h shortmess
set shm-=S

" Enable hidden buffers
set hidden

" display incomplete commands
set showcmd

" }}}

"*****************************************************************************
" Appearance(Color , theme , StatusLine) {{{
"*****************************************************************************

syntax enable
syntax on
"
" Maximum width of text that is being inserted
set tw=79
" display a column line
set colorcolumn=80
" Show tabs as CTRL-I is displayed, display $ after end of line
set list
" listchar
set listchars=tab:▸\ ,eol:¬,trail:·,precedes:←,extends:→

" show the cursor position all the time
set ruler

" set nu                                  " number line
let no_buffers_menu=1

" colorscheme
set background=dark
set cursorline
let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

if has("gui_running")
	" hide menu and toolbar
	set guioptions-=m
	set guioptions-=T
	" fix cursor on linux gvim
	set guioptions-=l
	set guioptions-=L
	set guioptions-=r
	set guioptions-=R

	" font
	set guifont=Fira\ Code\ weight=453\ 10
endif

" }}}

"*****************************************************************************
" Abbreviations {{{
"*****************************************************************************

" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" }}}

"*****************************************************************************
" Mappings {{{
"*****************************************************************************
"" Split
" noremap <Leader>h :<C-u>split<CR>
" noremap <Leader>v :<C-u>vsplit<CR>

"" Git
" noremap <Leader>ga :Gwrite<CR>
" noremap <Leader>gc :Gcommit<CR>
" noremap <Leader>gsh :Gpush<CR>
" noremap <Leader>gll :Gpull<CR>
" noremap <Leader>gs :Gstatus<CR>
" noremap <Leader>gb :Gblame<CR>
" noremap <Leader>gd :Gvdiff<CR>
" noremap <Leader>gr :Gremove<CR>

" session management
" nnoremap <leader>so :OpenSession<Space>
" nnoremap <leader>ss :SaveSession<Space>
" nnoremap <leader>sd :DeleteSession<CR>
" nnoremap <leader>sc :CloseSession<CR>

"" Tabs
" nnoremap <Tab> gt
" nnoremap <S-Tab> gT
" nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>:pwd<CR>

"" Clean search (highlight)
nnoremap <silent> <leader>nh :noh<CR>

" Better copy & paste
:set pastetoggle=<F5>

"" Disable arrowkeys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" center search results
nnoremap n nzvzz
nnoremap N Nzvzz
nnoremap * *zvzz
nnoremap # #zvzz




" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>


" Use <leader>Esc to leave terminal mode
tnoremap <leader><Esc> <C-\><C-n>

" tab settings
noremap <A-1> 1gt
noremap <A-2> 2gt
noremap <A-3> 3gt
noremap <A-4> 4gt
noremap <A-5> 5gt
noremap <A-6> 6gt
noremap <A-7> 7gt
noremap <A-8> 8gt
noremap <A-9> :tablast<cr>
noremap <A-0> :tabfirst<cr>

" windows resize
:nnoremap <silent> <Up> :resize -1<CR>
:nnoremap <silent> <Down> :resize +1<CR>
:nnoremap <silent> <left> :vertical resize -1<CR>
:nnoremap <silent> <right> :vertical resize +1<CR>

" }}}

"*****************************************************************************
" Netrw {{{
"*****************************************************************************

let g:netrw_banner = 0
" let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline theme
" let g:airline_theme='gruvbox'

let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1


" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" fix the command mode in the status line now show in vim"
if !has('nvim')
  au CmdLineEnter * redraws
endif

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" startify {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" session
if has('win32')
  let g:startify_session_dir = '~\vimfiles/startify_session'
else
  let g:startify_session_dir = '~/.vim/startify_session'
endif

" auto update session
let g:startify_session_persistence = 1

let g:startify_lists = [
         \ { 'type': 'files',     'header': ['   Files']            },
         \ { 'type': 'dir',       'header': ['   Current Directory '. getcwd()] },
         \ { 'type': 'sessions',  'header': ['   Sessions']       },
         \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
         \ ]

if has('win32')
  let g:startify_bookmarks = [
    \ { 'i': '~\_vimrc' },
    \ { 'z': '~\.zshrc' },
    \ { 'd': 'd:\develop\workspace'},
    \ { 'n': 'f:\Dropbox\Dropbox\docs\md\notes' },
    \ ]
else
  let g:startify_bookmarks = [
    \ { 'i': '~/.vimrc' },
    \ { 'z': '~/.zshrc' },
    \ { 'd': '~/develop/workspace'},
    \ { 'n': '~/Dropbox/docs/md/notes' },
    \ ]
endif

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown for CTag {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Add support for markdown files in tagbar.
" see https://github.com/jszakmeister/markdown2ctags
" let g:tagbar_type_markdown = {
"     \ 'ctagstype': 'markdown',
"     \ 'ctagsbin' : '~/.vim/scripts/markdown2ctags.py',
"     \ 'ctagsargs' : '-f - --sort=yes --sro=»',
"     \ 'kinds' : [
"         \ 's:sections',
"         \ 'i:images'
"     \ ],
"     \ 'sro' : '»',
"     \ 'kind2scope' : {
"         \ 's' : 'section',
"     \ },
"     \ 'sort': 0,
" \ }

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" coc.nvim config {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TextEdit might fail if hidden is not set.
set hidden

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif


" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format)
nmap <leader>f  <Plug>(coc-format)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction)
nmap <leader>a  <Plug>(coc-codeaction)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Golang config {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

autocmd BufWritePre *.go :call CocAction('organizeImport')

" shortcuts for golang
augroup vim-go
	au!
	" autocmd FileType go nmap <leader>b  <Plug>(go-build)
	autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
	autocmd FileType go nmap <leader>r  <Plug>(go-run)
	autocmd FileType go nmap <leader>t  <Plug>(go-test)
augroup END



" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
" let g:go_def_mapping_enabled = 0


" GoTag see: https://github.com/jstemmer/gotags

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <Leader>o :Files<CR>
nnoremap <Leader>p :Buffers<CR>
nnoremap <Leader>h :History<CR>

" Mapping selecting mappings
" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

" use tmux window
" if exists('$TMUX')
"   let g:fzf_layout = { 'tmux': '-p90%,60%' }
" else
"   let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
" endif

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => statusline bar(Deprecated, use airline) {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " 颜色参考 http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
" function! HasPaste()
"     if &paste
"          return '[PASTE]'
"     else
"         return ''
"     endif
" endfunction
" 
" function! CurDir()
"     let curdir = substitute(getcwd(), $HOME, "~", "")
"     return curdir
" endfunction
" 
" 
" 
" set laststatus=2                        " 始终显示状态栏
" 
" hi StatusLine ctermbg=236 ctermfg=250   cterm=NONE
" 
" set statusline=                         " start
" set statusline+=%1*%{HasPaste()}         " paste
" set statusline+=%3*\[%{mode()}\]        " mode
" set statusline+=%*
" set statusline+=\ 
" set statusline+=%y                            " filetype
" set statusline+=\                             " blank space
" set statusline+=%m%r%h                        " modified flag [+] [RO] [help]
" set statusline+=\                             " blank space
" set statusline+=\[%<%-10.60(%F%)\]%w
" 
" set statusline+=%=                            " right-align from now on
" 
" " set statusline+=%3*
" set statusline+=\[%{getcwd()}\]                   " show current work dir
" set statusline+=\[%{&fileformat}/%{&encoding}]             " os and filetype
" set statusline+=\[
" set statusline+=%v                            " column number
" set statusline+=\,                            " colon separator
" set statusline+=%l                            " row number
" set statusline+=\] 
" set statusline+=\                             " blank space
" set statusline+=%p%%                          " percent
" set statusline+=\-                            " slash separator
" set statusline+=%L                            " total number of rows
" set statusline+=%*
" set statusline+=\                             " blank space
" set statusline+=%{winnr()}                    " buffer number
" 
" " set statusline=\ \ (%f) \ \ \ %m
" " set statusline=\ %1*%{HasPaste()}%*%<%-15.25(%f%)
" " set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
" " set statusline+=\ \ \ [%{&ff}/%Y]
" " set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
" " set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L
" 
" 
" 
" 
" hi User1 ctermbg=196 ctermfg=015        " 粘贴模式的颜色
" hi User2 ctermbg=236 ctermfg=255
" hi User3 ctermbg=010 ctermfg=255
" hi User4 ctermfg=008
" hi User5 ctermfg=008
" hi User7 ctermfg=008
" hi User8 ctermfg=008
" hi User9 ctermfg=007
" 
" " 另一个方案
" " set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" pi2md config {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:pi2mdSettings = {
    \ 'debug': 1,
    \ 'storage': 1,
    \ 'storage_local_position_type': 0,
    \ 'storage_local_dir_name': 'images',
    \ 'storage_local_absolute_path': '/home/vincent/temp/imgs',
    \ 'storage_local_prefer_relative_path': 1,
    \ 'storage_cloud_tool': 'picgo-core',
    \ 'storage_cloud_picgocore_path': 
    \     '/home/vincent/.nvm/versions/node/v12.19.0/lib/node_modules/picgo/bin/picgo',
    \ 'storage_cloud_picgoapp_api_server_port': '36677'
  \ }

" }}}

"*****************************************************************************
" Some temp settings example {{{
"*****************************************************************************
" autocmd FileType sh setlocal ts=2 sts=2 sw=2
" autocmd FileType ruby setlocal ts=2 sts=2 sw=2
" autocmd FileType javascript setlocal ts=4 sts=4 sw=4
"
" }}}

" vim:set ft=vim et sts=4 ts=4 sw=4 fdm=marker tw=78:
